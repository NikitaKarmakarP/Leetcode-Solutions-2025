from collections import deque

class Solution:
    def minCost(self, grid):
        m, n = len(grid), len(grid[0])
        direction_map = {1: (0, 1), 2: (0, -1), 3: (1, 0), 4: (-1, 0)}
        costs = [[float('inf')] * n for _ in range(m)]
        costs[0][0] = 0
        dequeu = deque([(0, 0, 0)])  # (row, col, cost)
        
        while dequeu:
            x, y, cost = dequeu.popleft()
            
            for d in range(1, 5):
                dx, dy = direction_map[d]
                nx, ny = x + dx, y + dy
                
                if 0 <= nx < m and 0 <= ny < n:
                    new_cost = cost + (1 if grid[x][y] != d else 0)
                    if new_cost < costs[nx][ny]:
                        costs[nx][ny] = new_cost
                        if grid[x][y] == d:
                            dequeu.appendleft((nx, ny, new_cost))
                        else:
                            dequeu.append((nx, ny, new_cost))
        
        return costs[m - 1][n - 1]

# Example usage:
solution = Solution()

grid1 = [[1,1,1,1],[2,2,2,2],[1,1,1,1],[2,2,2,2]]
print(solution.minCost(grid1))  # Output: 3

grid2 = [[1,1,3],[3,2,2],[1,1,4]]
print(solution.minCost(grid2))  # Output: 0

grid3 = [[1,2],[4,3]]
print(solution.minCost(grid3))  # Output: 1

        
